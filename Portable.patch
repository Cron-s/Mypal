From da29c7f763a1263d3513969b142a0e426eb4fdee Mon Sep 17 00:00:00 2001
From: fedor <fedor@mail.ru>
Date: Mon, 5 Feb 2018 01:17:27 +0300
Subject: [PATCH] portable

---
 browser/components/nsBrowserGlue.js                |  6 ++-
 browser/components/preferences/advanced.js         | 26 ++++++++++
 browser/components/shell/nsIShellService.idl       |  3 ++
 browser/components/shell/nsWindowsShellService.cpp | 58 ++++++++++++++++++++++
 .../en-US/chrome/browser/shellservice.properties   |  2 +
 toolkit/xre/nsAppRunner.cpp                        | 47 ++++++++++++++++++
 6 files changed, 140 insertions(+), 2 deletions(-)

diff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js
index 705593b..18f3262 100644
--- a/browser/components/nsBrowserGlue.js
+++ b/browser/components/nsBrowserGlue.js
@@ -600,7 +600,9 @@ BrowserGlue.prototype = {
           (ss.sessionType == Ci.nsISessionStartup.RECOVER_SESSION);
       }
       catch (ex) { /* never mind; suppose SessionStore is broken */ }
-
+      //MYPAL PORTABLE CODE
+      let isPortable= shell.isPortableMode();
+      if (!isPortable) {
       let isDefault = shell.isDefaultBrowser(true, false); // startup check, check all assoc
 
       if (shouldCheck && !isDefault && !willRecoverSession) {
@@ -637,7 +639,7 @@ BrowserGlue.prototype = {
           shell.shouldCheckDefaultBrowser = checkEveryTime.value;
         }.bind(this), Ci.nsIThread.DISPATCH_NORMAL);
       }
-    }
+    }}
   },
 
   _onQuitRequest: function BG__onQuitRequest(aCancelQuit, aQuitType) {
diff --git a/browser/components/preferences/advanced.js b/browser/components/preferences/advanced.js
index 429a0c4..3d4880c 100644
--- a/browser/components/preferences/advanced.js
+++ b/browser/components/preferences/advanced.js
@@ -718,6 +718,8 @@ var gAdvancedPane = {
       document.getElementById("alwaysCheckDefault").disabled = true;
       return;
     }
+    let isPortable = shellSvc.isPortableMode();
+    if (isPortable) return;
     let selectedIndex =
       shellSvc.isDefaultBrowser(false, true) ? 1 : 0;
     setDefaultPane.selectedIndex = selectedIndex;
@@ -728,10 +730,33 @@ var gAdvancedPane = {
    */
   setDefaultBrowser: function()
   {
+    //MYPAL PORTABLE CODE
     let shellSvc = getShellService();
+    let sPortable;
     if (!shellSvc)
       return;
     try {
+    isPortable = shellSvc.isPortableMode();
+    if (isPortable) {
+          Components.utils.import("resource:///modules/RecentWindow.jsm");
+          var win = RecentWindow.getMostRecentBrowserWindow();
+          var brandBundle = win.document.getElementById("bundle_brand");
+          var shellBundle = win.document.getElementById("bundle_shell");
+
+          var brandShortName = brandBundle.getString("brandShortName");
+          var promptTitle = shellBundle.getString("PortablemodeTitle");
+          var promptMessage = shellBundle.getFormattedString("PortablemodeMessage",
+                                                              [brandShortName]);
+ //       var checkEveryTime = { value: shouldCheck };
+          var ps = Services.prompt;
+          var rv = ps.confirmEx(win, promptTitle, promptMessage,
+                                ps.STD_YES_NO_BUTTONS,
+                                null, null, null, null, { });//, checkboxLabel, checkEveryTime);
+          if (rv == 0) {
+	  shellSvc.cancelPortableMode();
+          isPortable=28;
+          } else return;
+        }
       let claimAllTypes = true;
 #ifdef XP_WIN
       // In Windows 8+, the UI for selecting default protocol is much
@@ -749,6 +774,7 @@ var gAdvancedPane = {
     let selectedIndex =
       shellSvc.isDefaultBrowser(false, true) ? 1 : 0;
     document.getElementById("setDefaultPane").selectedIndex = selectedIndex;
+    if (isPortable==28) Application.restart();
   }
 #endif
 };
diff --git a/browser/components/shell/nsIShellService.idl b/browser/components/shell/nsIShellService.idl
index 4825741..d1a7459 100644
--- a/browser/components/shell/nsIShellService.idl
+++ b/browser/components/shell/nsIShellService.idl
@@ -11,6 +11,9 @@ interface nsIFile;
 [scriptable, uuid(99d2e9f1-3c86-40f7-81fd-3060c18489f0)]
 interface nsIShellService : nsISupports
 {
+  //MYPAL PORTABLE CODE
+  boolean isPortableMode();
+  void cancelPortableMode();
   /**
    * Determines whether or not Firefox is the "Default Browser."
    * This is simply whether or not Firefox is registered to handle
diff --git a/browser/components/shell/nsWindowsShellService.cpp b/browser/components/shell/nsWindowsShellService.cpp
index 813ec4f..37f6910 100644
--- a/browser/components/shell/nsWindowsShellService.cpp
+++ b/browser/components/shell/nsWindowsShellService.cpp
@@ -402,6 +402,64 @@ nsWindowsShellService::IsDefaultBrowserVista(bool aCheckAllTypes,
   return false;
 }
 
+//MYPAL PORTABLE CODE
+NS_IMETHODIMP
+nsWindowsShellService::CancelPortableMode()
+{
+  nsresult rv;
+
+  nsCOMPtr<nsIFile> portmodemark;
+
+  rv = NS_GetSpecialDirectory(NS_OS_CURRENT_PROCESS_DIR,
+                              getter_AddRefs(portmodemark));
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  rv = portmodemark->AppendNative(NS_LITERAL_CSTRING("pmprt.mod"));
+
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  bool fileExists;
+  rv = portmodemark->Exists(&fileExists);
+
+  NS_ENSURE_SUCCESS(rv, rv);
+  if (fileExists)
+  portmodemark->Remove(false);
+
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+nsWindowsShellService::IsPortableMode(bool* aIsPortable)
+{
+  nsresult rv;
+  *aIsPortable=false;
+
+  nsCOMPtr<nsIFile> portmodemark;
+
+  rv = NS_GetSpecialDirectory(NS_OS_CURRENT_PROCESS_DIR,
+                              getter_AddRefs(portmodemark));
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  rv = portmodemark->AppendNative(NS_LITERAL_CSTRING("pmprt.mod"));
+
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  bool fileExists;
+  rv = portmodemark->Exists(&fileExists);
+  NS_ENSURE_SUCCESS(rv, rv);
+  
+//  nsAutoString path1;
+//  rv = portmodemark->GetPath(path1);
+//  ::MessageBoxW(NULL,path1.get(),L"Teest",MB_OKCANCEL);
+
+  if (fileExists){
+  *aIsPortable=true;
+  }
+  return NS_OK;
+}
+
+
 NS_IMETHODIMP
 nsWindowsShellService::IsDefaultBrowser(bool aStartupCheck,
                                         bool aForAllTypes,
diff --git a/browser/locales/en-US/chrome/browser/shellservice.properties b/browser/locales/en-US/chrome/browser/shellservice.properties
index d4f449f..e53fef3 100644
--- a/browser/locales/en-US/chrome/browser/shellservice.properties
+++ b/browser/locales/en-US/chrome/browser/shellservice.properties
@@ -7,6 +7,8 @@ safeModeLabel=%S &Safe Mode
 setDefaultBrowserTitle=Default Browser
 setDefaultBrowserMessage=%S is not currently set as your default browser. Would you like to make it your default browser?
 setDefaultBrowserDontAsk=Always perform this check when starting %S.
+PortablemodeTitle=Portable Mode
+PortablemodeMessage=By pressing Yes you switch %S into standart non-portable mode, restart will be executed as well.
 alreadyDefaultBrowser=%S is already set as your default browser.
 desktopBackgroundLeafNameWin=Desktop Background.bmp
 DesktopBackgroundDownloading=Saving Pictureâ€¦
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
index e69ead2..20a84a7 100644
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -203,6 +203,8 @@ int    gRestartArgc;
 char **gRestartArgv;
 
 bool gIsGtest = false;
+//MYPAL CODE
+bool portable = false;
 
 #ifdef MOZ_WIDGET_QT
 static int    gQtOnlyArgc;
@@ -2104,6 +2106,39 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProfileService* aProfileSvc, n
     return rv;
   }
 
+
+  //MYPAL PORTABLE CODE START
+  if (portable) {
+  nsCOMPtr<nsIFile> exeFile;
+  rv = XRE_GetBinaryPath(gArgv[0], getter_AddRefs(exeFile));
+  rv = exeFile->GetParent(getter_AddRefs(lf));
+  lf->AppendNative(NS_LITERAL_CSTRING("\Profile"));
+
+//  nsAutoString path1;
+//  rv = lf->GetPath(path1);
+//  ::MessageBoxW(NULL,path1.get(),L"Teest",MB_OKCANCEL);
+
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsCOMPtr<nsIProfileUnlocker> unlocker;
+
+  bool exists;
+   lf->Exists(&exists);
+   if (!exists) {
+       rv = lf->Create(nsIFile::DIRECTORY_TYPE, 0700);
+       NS_ENSURE_SUCCESS(rv, rv);
+   }
+
+    // If a profile path is specified directory on the command line, then
+    // assume that the temp directory is the same as the given directory.
+  rv = NS_LockProfilePath(lf, lf, getter_AddRefs(unlocker), aResult);
+  if (NS_SUCCEEDED(rv))
+    return rv;
+    return ProfileLockedDialog(lf, lf, unlocker, aNative, aResult);
+	}
+  //MYPAL PORTABLE CODE END
+
+
   uint32_t count;
   rv = aProfileSvc->GetProfileCount(&count);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -2985,6 +3020,18 @@ XREMain::XRE_mainInit(bool* aExitFlag)
     SaveToEnv("MOZ_NO_REMOTE=1");
   }
 
+  //MYPAL CODE
+  nsCOMPtr<nsIFile> portmodemark;
+  mDirProvider.GetAppDir()->Clone(getter_AddRefs(portmodemark));
+  portmodemark->AppendNative(NS_LITERAL_CSTRING("pmprt.mod"));
+  rv = portmodemark->Exists(&portable);
+  if (portable) SaveToEnv("MOZ_NO_REMOTE=1");
+  else{
+  mDirProvider.GetAppDir()->Clone(getter_AddRefs(portmodemark));
+  portmodemark->AppendNative(NS_LITERAL_CSTRING("pmundprt.mod"));
+  rv = portmodemark->Exists(&portable);}
+  //MYPAL CODE END
+
   ar = CheckArg("new-instance", true);
   if (ar == ARG_BAD) {
     PR_fprintf(PR_STDERR, "Error: argument --new-instance is invalid when argument --osint is specified\n");
-- 
2.8.2.windows.1

